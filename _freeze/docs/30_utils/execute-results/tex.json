{
  "hash": "3c3290b1a96a5c0ba7b5fb1d9d02c060",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: utils\ntbl-colwidths:\n  - 25\n  - 10\n  - 10\n  - 45\n---\n\n\n\nVarious utility functions for checking and defining compute engine, logging and creating the experimentation documentation.\n\n## Reproducibility {.unnumbered}\n\nReproducibility is one of the most important aspects of proper project development and management, for ourselves, as well as for other people to whom we will share the project and possibly need to make decisions based on the results.\n\n::: {.cell execution_count=2}\n\n::: {.cell-output .cell-output-display .cell-output-markdown}\n### `set_all_seeds` {.unnumbered}\n> set_all_seeds(seed: int)\n\n*Set the seed for all packages: python, numpy, torch, torch.cuda, and mps.*\n\nArguments:\n\n|       | type    |default| description|\n|--------|--------|--------|--------|\n| **seed** | int | None | Any positive integer value. |\n\n:::\n:::\n\n\nWe can set the seed for most of the libraries that we use in machine learning like: `numpy`, `torch`, `torch.cuda`, `mps` as well as for Python in general.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nset_all_seeds(seed=42)\n```\n:::\n\n\nIf you are using `FLAGS` then simply replace the value of the seed for the data class defined for the reproducibility. For example, if my data class is called `seed` then I would use:\n\n``` python\nset_all_seeds(seed=FLAGS.seed)\n```\n\n## Computation engine {.unnumbered}\n\n::: {.cell execution_count=4}\n\n::: {.cell-output .cell-output-display .cell-output-markdown}\n### `check_device` {.unnumbered}\n> check_device(verbose: bool)\n\n*Check which compute device is available on the machine.*\n\nArguments:\n\n|       | type    |default| description|\n|--------|--------|--------|--------|\n| **verbose** | bool | True | Show all print statements. |\n\n:::\n:::\n\n\nWe can use the function as follows, which if the argument `verbose` is `True` it will print out the compute device currently available.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndevice = check_device()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUsing mps device!\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n\n::: {.cell-output .cell-output-display .cell-output-markdown}\n### `moveTo` {.unnumbered}\n> moveTo(obj: _empty, device: str)\n\n*Move an object to a specified device. It is a recursive function which\nchecks iteratively for every element of obj. The device is determined by the function check_device().\nRef: Inside Deep Learning by Raff E. page 15*\n\nArguments:\n\n|       | type    |default| description|\n|--------|--------|--------|--------|\n| **obj** | _empty | None | object |\n| **device** | str | None | name of the device to move the obj to. Examples are \"cuda\", \"mps, \"cpu\". |\n\n:::\n:::\n\n\n## System information {.unnumbered}\n\n::: {.cell execution_count=7}\n\n::: {.cell-output .cell-output-display .cell-output-markdown}\n### `get_python_version` {.unnumbered}\n> get_python_version()\n\n*Return the current running Python version.\n    *\n\nArguments:\n\n|       | type    |default| description|\n|--------|--------|--------|--------|\n\n:::\n:::\n\n\n::: {.cell execution_count=8}\n\n::: {.cell-output .cell-output-display .cell-output-markdown}\n### `get_package_version` {.unnumbered}\n> get_package_version(package_name: _empty)\n\n*Print the version of the Python package.*\n\nArguments:\n\n|       | type    |default| description|\n|--------|--------|--------|--------|\n| **package_name** | _empty | None | Name of the package. |\n\n:::\n:::\n\n\n## Creating experiment information document {.unnumbered}\n\n::: {.cell execution_count=9}\n\n::: {.cell-output .cell-output-display .cell-output-markdown}\n### `update_config` {.unnumbered}\n> update_config(FLAGS: _empty)\n\n*Update config arguments if any change was done via CLI when\nrunning \"sh run.sh\".*\n\nArguments:\n\n|       | type    |default| description|\n|--------|--------|--------|--------|\n| **FLAGS** | _empty | None | Instantiation of the `config` dataclass. |\n\n:::\n:::\n\n\n::: {.cell execution_count=10}\n\n::: {.cell-output .cell-output-display .cell-output-markdown}\n### `create_experiment_descr_file` {.unnumbered}\n> create_experiment_descr_file(config: _empty)\n\n*Create a txt file to include information on\nexperiment including all the parameters used.*\n\nArguments:\n\n|       | type    |default| description|\n|--------|--------|--------|--------|\n| **config** | _empty | None | Python script defining project parameters. |\n\n:::\n:::\n\n\n::: {.cell execution_count=11}\n\n::: {.cell-output .cell-output-display .cell-output-markdown}\n### `add_runtime_experiment_info` {.unnumbered}\n> add_runtime_experiment_info(start_time: _empty, config: _empty)\n\n*Create structure of the experiment info file.*\n\nArguments:\n\n|       | type    |default| description|\n|--------|--------|--------|--------|\n| **start_time** | _empty | None | _description_ |\n| **config** | _empty | None | _description_ |\n\n:::\n:::\n\n\n",
    "supporting": [
      "30_utils_files/figure-pdf"
    ],
    "filters": []
  }
}