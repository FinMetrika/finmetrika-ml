{
  "hash": "0123d3a1a4dd6919f48a6abd17ceec21",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: data_sampling\ntbl-colwidths:\n  - 25\n  - 10\n  - 10\n  - 45\n---\n\n\n\n# Stratified random sampling {.unnumbered}\n\nSampling from a HuggingFace-like dataset:\n\n::: {#10fd71ae .cell execution_count=2}\n\n::: {.cell-output .cell-output-display .cell-output-markdown}\n### `stratified_sample_from_dataset` {.unnumbered}\n> stratified_sample_from_dataset(data: DatasetDict, by_split: str, random_seed: int, perc_sample: float, return_complement_sample: bool)\n\n*Stratified sampling without replacement. Sample a percentage of a dataset given the dataset split.\nIf 'return_complement_sample' is set to True then the function returns the complement sample as well.*\n\nArguments:\n\n|       | type    |default| description|\n|--------|--------|--------|--------|\n| **data** | DatasetDict | None |  |\n| **by_split** | str | None | Which data subset based on split should we sample from. Example: 'train'. |\n| **random_seed** | int | None | Project arguments. |\n| **perc_sample** | float | None | percentage of samples to obtain |\n| **return_complement_sample** | bool | True | Save the compleent sample as well. |\n\n:::\n:::\n\n\nFor example, if we have a HuggingFace dataset `emotion`\n\n\n\n::: {#b6b6be0d .cell execution_count=4}\n``` {.python .cell-code}\nemotion\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nDatasetDict({\n    train: Dataset({\n        features: ['text', 'label'],\n        num_rows: 16000\n    })\n    validation: Dataset({\n        features: ['text', 'label'],\n        num_rows: 2000\n    })\n    test: Dataset({\n        features: ['text', 'label'],\n        num_rows: 2000\n    })\n})\n```\n:::\n:::\n\n\nSay we want to create a smaller sample of 1% of train data but using stratified sampling. We should define which split to sample from and the percentage of samples. Note that due to stratified nature of sampling and depending on how many label examples are present in each label group there can be a possibility that we sample (in count) less or more than what you would get as exact 1% of total dataset.\n\n::: {#115d726d .cell execution_count=5}\n``` {.python .cell-code}\nemotion_sub = stratified_sample_from_dataset(\n                  data=emotion, \n                  by_split='train', \n                  random_seed=42, \n                  perc_sample=0.01)\nemotion_sub\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nDatasetDict({\n    train: Dataset({\n        features: ['text', 'label'],\n        num_rows: 161\n    })\n    trainC: Dataset({\n        features: ['text', 'label'],\n        num_rows: 15839\n    })\n})\n```\n:::\n:::\n\n\n",
    "supporting": [
      "04_data_sampling_files"
    ],
    "filters": [],
    "includes": {}
  }
}